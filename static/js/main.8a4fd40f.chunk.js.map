{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getProp","object","path","StyledSearchBox","styled","props","SearchBox","searchType","useState","divRef","useRef","useMemo","parseQuery","data","parameters","query","dataKeys","Object","filteredData","item","dataItem","searchKeyItem","testPassed","itemMap","value","name","metadata","key","options","includeScore","ignoreLocation","minMatchCharLength","shouldSort","keys","searchKeys","result","fuse","err","console","renderAll","handleChange","setValue","suggestions","setResults","onFilter","ref","onBlur","event","document","style","maxHeight","height","width","type","onChange","target","onFocus","placeholder","results","overflow","overflowY","zIndex","index","className","itemResult","indexResult","borderRadius","cursor","onClick","onSelect","planets","dataSet","bodies","filter","isPlanet","satellites","aroundPlanet","englishName","paramsSearch","renderName","renderMeta","minCar","idKey","planet","id","App","log","group","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8a4fd40f.chunk.js","sourcesContent":["// Import modules\nimport React, { useState, useRef, useMemo } from 'react'\nimport styled from 'styled-components'\nimport Fuse from 'fuse.js'\n\n// Utilities\nconst getProp = (object, path) => {\n  if (path.indexOf('.') === -1) {\n    return typeof object[path] === 'number'\n      ? object[path].toString()\n      : object[path]\n  } else {\n    if (object[path.split('.')[0]])\n      return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n    else {\n      object[path.split('.')[0]] = {}\n      return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n    }\n  }\n}\n\n/*  ---  Headless component  ---  */\nexport const useSearch = () => {\n  return useMemo(\n    () => ({\n      parseQuery: (data, parameters, searchType, query) => {\n        try {\n          // Filter the data set by keys provided\n          const dataKeys = Object.keys(data)\n          let filteredData = {}\n          switch (searchType) {\n            case 'strict':\n              dataKeys.forEach((item) => {\n                // If parameters available\n                if (parameters[item]) {\n                  filteredData = {\n                    ...filteredData,\n                    [item]: data[item]\n                      .filter((dataItem) => {\n                        const testPassed = parameters[\n                          item\n                        ].searchKeys.map((searchKeyItem) =>\n                          query &&\n                          getProp(dataItem, searchKeyItem) &&\n                          getProp(dataItem, searchKeyItem)\n                            .toLowerCase()\n                            .indexOf(query.toLowerCase()) !== -1\n                            ? true\n                            : false\n                        )\n                        return testPassed.includes(true) ? true : false\n                      })\n                      .map((itemMap) => ({\n                        value: itemMap[parameters[item].idKey],\n                        name: parameters[item].renderName(itemMap),\n                        metadata: parameters[item].renderMeta(itemMap)\n                      }))\n                  }\n                }\n              })\n              break\n            case 'fuzzy':\n              dataKeys.forEach((key) => {\n                // If parameters available\n                if (parameters[key]) {\n                  const options = {\n                    includeScore: true,\n                    ignoreLocation: true,\n                    minMatchCharLength: parameters[key].minCar,\n                    shouldSort: true,\n                    keys: parameters[key].searchKeys\n                  }\n                  const fuse = new Fuse(data[key], options)\n                  const result = fuse.search(query)\n                  filteredData = {\n                    ...filteredData,\n                    [key]: result.map((itemMap) => ({\n                      value: itemMap.item[parameters[key].idKey],\n                      name: parameters[key].renderName(itemMap.item),\n                      metadata: parameters[key].renderMeta(itemMap.item)\n                    }))\n                  }\n                }\n              })\n              break\n            default:\n              break\n          }\n          return filteredData\n        } catch (err) {\n          console.error(err.message)\n        }\n      },\n      renderAll: (data, parameters) => {\n        let filteredData = {}\n        Object.keys(data).forEach((item) => {\n          if (parameters[item]) {\n            filteredData = {\n              ...filteredData,\n              [item]: data[item].map((itemMap) => ({\n                value: itemMap[parameters[item].idKey],\n                name: parameters[item].renderName(itemMap),\n                metadata: parameters[item].renderMeta(itemMap)\n              }))\n            }\n          }\n        })\n        return filteredData\n      }\n    }),\n    []\n  )\n}\n\n/*  ---  Styled example  ---  */\n\n// Styles\nconst StyledSearchBox = styled.input`\n  font-family: 'AT Surt SemiBold';\n  background-color: white;\n  color: black;\n  border-radius: 20px;\n  border-color: lightgrey;\n  display: inline-block;\n  margin-bottom: 0;\n  text-align: left;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n  touch-action: manipulation;\n  cursor: text;\n  border: 1px solid black;\n  padding: 6px 12px;\n  font-size: 0.875rem;\n  line-height: 1.42857143;\n  box-sizing: border-box;\n  width: 100%;\n  font-size: ${(props) => (props.size ? props.size * 18 + 'px' : 'auto')};\n\n  &:disabled {\n    background-color: ${(props) =>\n      props.version === 'light' ? 'lightgrey' : 'black'};\n    color: ${(props) => (props.version === 'light' ? 'lightgrey' : 'black')};\n  }\n\n  &:hover {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.2);\n  }\n`\n\n// Component\nexport const SearchBox = ({\n  data,\n  parameters,\n  suggestions,\n  onFilter,\n  onSelect,\n  searchType\n}) => {\n  const [results, setResults] = useState()\n  const [value, setValue] = useState('')\n  const divRef = useRef(null)\n\n  const { parseQuery, renderAll } = useSearch()\n\n  const handleBlur = () => {\n    function handleClickOutside(event) {\n      if (\n        divRef.current &&\n        results &&\n        suggestions &&\n        !divRef.current.contains(event.target)\n      ) {\n        setResults()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }\n\n  const handleChange = (query) => {\n    try {\n      // Set the input value\n      setValue(query)\n      let filteredData = {}\n\n      if (query) {\n        filteredData = parseQuery(data, parameters, searchType, query)\n      } else {\n        filteredData = renderAll(data, parameters)\n      }\n\n      if (suggestions && query) {\n        setResults(filteredData)\n      } else {\n        onFilter(filteredData)\n      }\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  return (\n    <div\n      ref={divRef}\n      onBlur={handleBlur}\n      style={{ maxHeight: '5vh', height: '5vh', width: '100%' }}\n    >\n      <StyledSearchBox\n        type='search'\n        value={value}\n        onChange={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        onFocus={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        placeholder={'Type anything...'}\n      />\n      {results && suggestions && (\n        <div\n          style={{\n            maxHeight: '50vh',\n            overflow: 'visible',\n            overflowY: 'scroll',\n            zIndex: 2000\n          }}\n        >\n          {Object.keys(results).map((item, index) => {\n            return (\n              <div key={index} className='bg-white border-dark border-bottom'>\n                <div className='border-dark border-bottom justify-content-between align-items-center'>\n                  <h1>{item}</h1>\n                </div>\n                <div className='mt-3'>\n                  {results[item].length > 0 &&\n                    results[item].map((itemResult, indexResult) => (\n                      <div\n                        key={indexResult}\n                        className='border-dark border p-2 m-2'\n                        style={{ borderRadius: '20px', cursor: 'pointer' }}\n                        onClick={() => {\n                          onSelect(item, itemResult)\n                          setResults(null)\n                        }}\n                      >\n                        <p className='m-0'>{itemResult.name}</p>\n                      </div>\n                    ))}\n                  {results[item].length === 0 && (\n                    <p className='m-0'>No results</p>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { SearchBox } from 'react-search-headless'\nimport dataSet from './data.json'\n\nconst data = {\n  planets: dataSet.bodies.filter((item) => item.isPlanet === true),\n  satellites: dataSet.bodies\n    .filter((item) => item.isPlanet === false && item.aroundPlanet)\n    .filter((item) => item.englishName)\n}\n\n// How you are searching and rendering these data\nconst paramsSearch = {\n  planets: {\n    searchKeys: ['englishName'],\n    renderName: (item) => item.englishName,\n    renderMeta: (item) => item,\n    minCar: 3,\n    idKey: 'id'\n  },\n  satellites: {\n    searchKeys: ['englishName', 'aroundPlanet.planet'],\n    renderName: (item) =>\n      `${item.englishName}, satellite of ${\n        data.planets.filter(\n          (planet) => planet.id === item.aroundPlanet.planet\n        )[0].englishName\n      }`,\n    renderMeta: (item) => {\n      const { id, aroundPlanet, ...meta } = item\n      return meta\n    },\n    minCar: 1,\n    idKey: 'id'\n  }\n}\n\nconst App = () => {\n  return (\n    <div>\n      <SearchBox\n        searchType='strict'\n        data={data}\n        parameters={paramsSearch}\n        suggestions={true}\n        onFilter={(value) => {\n          console.log(value)\n        }}\n        onSelect={(group, value) => {\n          console.log(group, value)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}