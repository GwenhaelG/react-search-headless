{"version":3,"sources":["../../src/core/core.js","../../src/components/SearchBox.js","../../src/components/SearchBoxGrouped.js","../../src/index.js","App.js","index.js"],"names":["typeAndValue","object","type","value","Object","err","console","getProp","path","testObject","query","dataItem","searchKeyItem","searchDepth","prop","testObjectFuzzy","filter","data","parameters","searchType","filteredData","testPassed","itemMap","name","metadata","options","includeScore","threshold","minMatchCharLength","filterGrouped","dataKeys","item","returnAll","returnAllGrouped","SearchBox","version","useState","divRef","useRef","handleChange","setValue","suggestions","setResults","onFilter","ref","onBlur","event","document","style","maxHeight","height","width","position","onChange","target","onFocus","placeholder","results","backgroundColor","border","borderRadius","padding","zIndex","overflowY","itemResult","indexResult","key","onClick","onSelect","index","borderBottom","useSearch","useMemo","p","SearchBoxGrouped","Suggestions","StyledSuggestions","dataSet","bodies","isPlanet","dataGrouped","planets","satellites","aroundPlanet","englishName","App","component","dataType","searchKeys","minCar","fuzzySensibility","setParameters","minHeight","display","flexDirection","justifyContent","flexWrap","marginBottom","alignItems","margin","marginRight","split","min","marginTop","overflowWrap","wordWrap","renderName","renderMeta","idKey","id","planet","length","map","JSON","stringify","moons","log","group","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.01091dfa.chunk.js","sourcesContent":["// Import modules\nimport Fuse from 'fuse.js'\n\n/* --  Utilities -- */\n\n// Return type and value of object\nconst typeAndValue = (object) => {\n  try {\n    switch (typeof object) {\n      case 'number':\n        return { type: 'number', value: object.toString() }\n      case 'boolean':\n        return { type: 'boolean', value: object }\n      case 'object':\n        switch (Object.prototype.toString.call(object)) {\n          case '[object Object]':\n            return { type: 'object', value: object }\n          case '[object Array]':\n            return { type: 'array', value: object }\n          case '[object Date]':\n            return { type: 'date', value: object }\n          case '[object Math]':\n            return { type: 'math', value: object }\n          case '[object Null]':\n            return { type: 'null', value: object }\n          default:\n            return { type: 'undefined', value: object }\n        }\n      default:\n        return { type: 'string', value: object }\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Analyse the tree, checking for additional depth, and for type and value, whether there is a given path or not\nconst getProp = (object, path) => {\n  try {\n    if (!path) {\n      return typeAndValue(object)\n    } else {\n      if (path.indexOf('.') === -1) {\n        return typeAndValue(object[path])\n      } else {\n        if (object[path.split('.')[0]])\n          return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n        else {\n          return typeAndValue('')\n        }\n      }\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Test the object and return an array of true or false, one entry per object tested\nconst testObject = (query, dataItem, searchKeyItem, searchDepth) => {\n  try {\n    const prop = getProp(dataItem, searchKeyItem)\n    switch (prop.type) {\n      case 'number':\n        return prop.value.toLowerCase().indexOf(query.toLowerCase()) !== -1\n          ? true\n          : false\n      case 'string':\n        return prop.value.toLowerCase().indexOf(query.toLowerCase()) !== -1\n          ? true\n          : false\n      case 'object':\n        return !searchDepth || searchDepth > 0\n          ? Object.keys(prop.value)\n              .map((searchKeyItem) =>\n                testObject(\n                  query,\n                  prop.value,\n                  searchKeyItem,\n                  searchDepth ? searchDepth - 1 : 1\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      case 'array':\n        return !searchDepth || searchDepth > 0\n          ? prop.value\n              .map((dataItem) =>\n                testObject(\n                  query,\n                  dataItem,\n                  null,\n                  searchDepth ? searchDepth - 1 : 1\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      default:\n        return false\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Test the object and return an array of true or false, one entry per object tested\nconst testObjectFuzzy = (\n  query,\n  dataItem,\n  searchKeyItem,\n  searchDepth,\n  fuseOptions\n) => {\n  try {\n    const prop = getProp(dataItem, searchKeyItem)\n    switch (prop.type) {\n      case 'number':\n        return new Fuse([prop.value.toLowerCase()], fuseOptions).search(query)\n          .length !== 0\n          ? true\n          : false\n      case 'string':\n        return new Fuse([prop.value.toLowerCase()], fuseOptions).search(query)\n          .length !== 0\n          ? true\n          : false\n      case 'object':\n        return !searchDepth || searchDepth > 0\n          ? Object.keys(prop.value)\n              .map((searchKeyItem) =>\n                testObjectFuzzy(\n                  query,\n                  prop.value,\n                  searchKeyItem,\n                  searchDepth ? searchDepth - 1 : 1,\n                  fuseOptions\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      case 'array':\n        return !searchDepth || searchDepth > 0\n          ? prop.value\n              .map((dataItem) =>\n                testObjectFuzzy(\n                  query,\n                  dataItem,\n                  null,\n                  searchDepth ? searchDepth - 1 : 1,\n                  fuseOptions\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      default:\n        return false\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\nexport const filter = (data, parameters, searchType, query) => {\n  try {\n    let filteredData\n    switch (searchType) {\n      case 'strict':\n        filteredData = data\n          .filter((dataItem) => {\n            let testPassed\n            parameters.searchKeys\n              ? (testPassed = parameters.searchKeys.map(\n                  (searchKeyItem) =>\n                    query &&\n                    (parameters.minCar\n                      ? query.length > parameters.minCar\n                      : true) &&\n                    testObject(query, dataItem, searchKeyItem)\n                ))\n              : (testPassed = Object.keys(dataItem).map(\n                  (searchKeyItem) =>\n                    query &&\n                    (parameters.minCar\n                      ? query.length > parameters.minCar\n                      : true) &&\n                    testObject(\n                      query,\n                      dataItem,\n                      searchKeyItem,\n                      parameters.searchDepth\n                    )\n                ))\n            return testPassed.includes(true) ? true : false\n          })\n          .map((itemMap) => ({\n            value: itemMap[parameters.idKey],\n            name: parameters.renderName(itemMap),\n            metadata: parameters.renderMeta(itemMap)\n          }))\n        break\n      case 'fuzzy':\n        const options = {\n          includeScore: parameters.includeScore\n            ? parameters.includeScore\n            : false,\n          threshold: parameters.fuzzySensibility\n            ? parameters.fuzzySensibility\n            : 0.5,\n          minMatchCharLength: parameters.minCar ? parameters.minCar : 0\n        }\n        filteredData = data\n          .filter((dataItem) => {\n            let testPassed\n            parameters.searchKeys\n              ? (testPassed = parameters.searchKeys.map(\n                  (searchKeyItem) =>\n                    query &&\n                    testObjectFuzzy(\n                      query,\n                      dataItem,\n                      searchKeyItem,\n                      parameters.searchDepth,\n                      options\n                    )\n                ))\n              : (testPassed = Object.keys(dataItem).map(\n                  (searchKeyItem) =>\n                    query &&\n                    testObjectFuzzy(\n                      query,\n                      dataItem,\n                      searchKeyItem,\n                      parameters.searchDepth,\n                      options\n                    )\n                ))\n            return testPassed.includes(true) ? true : false\n          })\n          .map((itemMap) => ({\n            value: itemMap[parameters.idKey],\n            name: parameters.renderName(itemMap),\n            metadata: parameters.renderMeta(itemMap)\n          }))\n      default:\n        break\n    }\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Parse query and return filtered results as groups\nexport const filterGrouped = (data, parameters, searchType, query) => {\n  try {\n    // Filter the data set by keys provided\n    const dataKeys = Object.keys(data)\n    let filteredData = {}\n    switch (searchType) {\n      case 'strict':\n        dataKeys.forEach((item) => {\n          // If parameters available\n          if (parameters[item]) {\n            filteredData = {\n              ...filteredData,\n              [item]: data[item]\n                .filter((dataItem) => {\n                  let testPassed\n                  parameters[item].searchKeys\n                    ? (testPassed = parameters[item].searchKeys.map(\n                        (searchKeyItem) =>\n                          query &&\n                          (parameters[item].minCar\n                            ? query.length > parameters[item].minCar\n                            : true) &&\n                          testObject(query, dataItem, searchKeyItem)\n                      ))\n                    : (testPassed = Object.keys(dataItem).map(\n                        (searchKeyItem) =>\n                          query &&\n                          (parameters[item].minCar\n                            ? query.length > parameters[item].minCar\n                            : true) &&\n                          testObject(\n                            query,\n                            dataItem,\n                            searchKeyItem,\n                            parameters[item].searchDepth\n                          )\n                      ))\n                  return testPassed.includes(true) ? true : false\n                })\n                .map((itemMap) => ({\n                  value: itemMap[parameters[item].idKey],\n                  name: parameters[item].renderName(itemMap),\n                  metadata: parameters[item].renderMeta(itemMap)\n                }))\n            }\n          }\n        })\n        break\n      case 'fuzzy':\n        dataKeys.forEach((item) => {\n          const options = {\n            includeScore: parameters[item].includeScore\n              ? parameters[item].includeScore\n              : false,\n            threshold: parameters[item].fuzzySensibility\n              ? parameters[item].fuzzySensibility\n              : 0.5,\n            minMatchCharLength: parameters[item].minCar\n              ? parameters[item].minCar\n              : 0\n          }\n          // If parameters available\n          if (parameters[item]) {\n            filteredData = {\n              ...filteredData,\n              [item]: data[item]\n                .filter((dataItem) => {\n                  let testPassed\n                  parameters[item].searchKeys\n                    ? (testPassed = parameters[item].searchKeys.map(\n                        (searchKeyItem) =>\n                          query &&\n                          testObjectFuzzy(\n                            query,\n                            dataItem,\n                            searchKeyItem,\n                            options\n                          )\n                      ))\n                    : (testPassed = Object.keys(dataItem).map(\n                        (searchKeyItem) =>\n                          query &&\n                          testObjectFuzzy(\n                            query,\n                            dataItem,\n                            searchKeyItem,\n                            parameters[item].searchDepth,\n                            options\n                          )\n                      ))\n                  return testPassed.includes(true) ? true : false\n                })\n                .map((itemMap) => ({\n                  value: itemMap[parameters[item].idKey],\n                  name: parameters[item].renderName(itemMap),\n                  metadata: parameters[item].renderMeta(itemMap)\n                }))\n            }\n          }\n        })\n        break\n      default:\n        break\n    }\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Return all results\nexport const returnAll = (data, parameters) => {\n  try {\n    let filteredData\n    filteredData = data.map((itemMap) => ({\n      value: itemMap[parameters.idKey],\n      name: parameters.renderName(itemMap),\n      metadata: parameters.renderMeta(itemMap)\n    }))\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Return all results - grouped\nexport const returnAllGrouped = (data, parameters) => {\n  try {\n    let filteredData = {}\n    Object.keys(data).forEach((item) => {\n      if (parameters[item]) {\n        filteredData = {\n          ...filteredData,\n          [item]: data[item].map((itemMap) => ({\n            value: itemMap[parameters[item].idKey],\n            name: parameters[item].renderName(itemMap),\n            metadata: parameters[item].renderMeta(itemMap)\n          }))\n        }\n      }\n    })\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n","import React, { useState, useRef } from 'react'\nimport { filter, returnAll } from '../core/core'\n\n// Unstyled component\nconst SearchBox = ({\n  data,\n  parameters,\n  suggestions,\n  onFilter,\n  onSelect,\n  searchType,\n  version\n}) => {\n  const [results, setResults] = useState()\n  const [value, setValue] = useState('')\n  const divRef = useRef(null)\n\n  const handleBlur = () => {\n    function handleClickOutside(event) {\n      if (\n        divRef.current &&\n        results &&\n        suggestions &&\n        !divRef.current.contains(event.target)\n      ) {\n        setResults()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }\n\n  const handleChange = (query) => {\n    try {\n      // Set the input value\n      setValue(query)\n      let filteredData = {}\n\n      if (query) {\n        filteredData = filter(data, parameters, searchType, query)\n      } else {\n        filteredData = returnAll(data, parameters)\n      }\n\n      if (suggestions && query) {\n        setResults(filteredData)\n      } else {\n        onFilter(filteredData)\n      }\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  return (\n    <div\n      ref={divRef}\n      onBlur={handleBlur}\n      style={{\n        maxHeight: '5vh',\n        height: '5vh',\n        width: '100%',\n        position: 'relative'\n      }}\n    >\n      <input\n        version={version}\n        type='search'\n        value={value}\n        onChange={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        onFocus={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        placeholder={'Type anything...'}\n      />\n      {results && suggestions && (\n        <div\n          style={{\n            backgroundColor: 'white',\n            border: '1px solid black',\n            borderRadius: '5px',\n            padding: '10px',\n            zIndex: 2000,\n            maxHeight: '50vh',\n            overflowY: 'scroll'\n          }}\n        >\n          {results.length > 0 &&\n            results.map((itemResult, indexResult) => (\n              <div\n                key={indexResult}\n                onClick={() => {\n                  onSelect(itemResult)\n                  setResults(null)\n                }}\n              >\n                <p>{itemResult.name}</p>\n              </div>\n            ))}\n          {results.length === 0 && <p>No results</p>}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { useState, useRef } from 'react'\nimport { filterGrouped, returnAllGrouped } from '../core/core'\n\n// Unstyled component\nconst SearchBox = ({\n  data,\n  parameters,\n  suggestions,\n  onFilter,\n  onSelect,\n  searchType,\n  version\n}) => {\n  const [results, setResults] = useState()\n  const [value, setValue] = useState('')\n  const divRef = useRef(null)\n\n  const handleBlur = () => {\n    function handleClickOutside(event) {\n      if (\n        divRef.current &&\n        results &&\n        suggestions &&\n        !divRef.current.contains(event.target)\n      ) {\n        setResults()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }\n\n  const handleChange = (query) => {\n    try {\n      // Set the input value\n      setValue(query)\n      let filteredData = {}\n\n      if (query) {\n        filteredData = filterGrouped(data, parameters, searchType, query)\n      } else {\n        filteredData = returnAllGrouped(data, parameters)\n      }\n\n      if (suggestions && query) {\n        setResults(filteredData)\n      } else {\n        onFilter(filteredData)\n      }\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  return (\n    <div\n      ref={divRef}\n      onBlur={handleBlur}\n      style={{\n        maxHeight: '5vh',\n        height: '5vh',\n        width: '100%',\n        position: 'relative'\n      }}\n    >\n      <input\n        version={version}\n        type='search'\n        value={value}\n        onChange={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        onFocus={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        placeholder={'Type anything...'}\n      />\n      {results && suggestions && (\n        <div\n          style={{\n            backgroundColor: 'white',\n            border: '1px solid black',\n            borderRadius: '5px',\n            padding: '10px',\n            zIndex: 2000,\n            maxHeight: '50vh',\n            overflowY: 'scroll'\n          }}\n        >\n          {Object.keys(results).map((item, index) => {\n            return (\n              <div key={index}>\n                <div>\n                  <h1 style={{ borderBottom: '1px solid black' }}>{item}</h1>\n                </div>\n                <div>\n                  {results[item].length > 0 &&\n                    results[item].map((itemResult, indexResult) => (\n                      <div\n                        key={indexResult}\n                        onClick={() => {\n                          onSelect(item, itemResult)\n                          setResults(null)\n                        }}\n                      >\n                        <p>{itemResult.name}</p>\n                      </div>\n                    ))}\n                  {results[item].length === 0 && <p>No results</p>}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBox\n","// Import modules\nimport React, { useMemo } from 'react'\nimport { filter, filterGrouped, returnAll, returnAllGrouped } from './core/core'\nimport SearchBox from './components/SearchBox'\nimport SearchBoxGrouped from './components/SearchBoxGrouped'\n\n/*  ---  Headless component  ---  */\nexport const useSearch = () => {\n  return useMemo(\n    () => ({\n      filter: (...p) => filter(...p),\n      filterGrouped: (...p) => filterGrouped(...p),\n      returnAll: (...p) => returnAll(...p),\n      returnAllGrouped: (...p) => returnAllGrouped(...p),\n      SearchBox: ({ ...p }) => <SearchBox {...p} />,\n      SearchBoxGrouped: ({ ...p }) => <SearchBoxGrouped {...p} />,\n      Suggestions: ({ ...p }) => <Suggestions {...p} />,\n      StyledSuggestions: ({ ...p }) => <StyledSuggestions {...p} />\n    }),\n    []\n  )\n}\n","import React, { useState } from 'react'\nimport { useSearch } from 'react-search-headless'\nimport dataSet from './data.json'\n\n// The data\nconst data = dataSet.bodies.filter((item) => item.isPlanet === true)\n\n// The data\nconst dataGrouped = {\n  planets: dataSet.bodies.filter((item) => item.isPlanet === true),\n  satellites: dataSet.bodies\n    .filter((item) => item.isPlanet === false && item.aroundPlanet)\n    .filter((item) => item.englishName)\n}\n\nconst App = () => {\n  const { filter, filterGrouped, SearchBox, SearchBoxGrouped } = useSearch()\n\n  const [parameters, setParameters] = useState({\n    component: 'hooks',\n    searchType: 'strict',\n    dataType: 'simple',\n    searchKeys: null,\n    searchDepth: null,\n    minCar: null,\n    fuzzySensibility: null\n  })\n\n  const [results, setResults] = useState()\n\n  return (\n    <div\n      style={{\n        padding: '20px',\n        backgroundColor: 'lightgrey',\n        minHeight: '100vh'\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n          marginBottom: '5vh'\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Component</p>\n          <select\n            style={{ marginRight: '15px' }}\n            value={parameters.component}\n            onChange={({ target: { value } }) =>\n              setParameters({ ...parameters, component: value })\n            }\n          >\n            <option value='hooks'>Hooks</option>\n            <option value='unstyled'>Unstyled Searchbox</option>\n          </select>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Search type</p>\n          <select\n            style={{ marginRight: '15px' }}\n            value={parameters.searchType}\n            onChange={({ target: { value } }) =>\n              setParameters({ ...parameters, searchType: value })\n            }\n          >\n            <option value='strict'>Strict</option>\n            <option value='fuzzy'>Fuzzy</option>\n          </select>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Dataset type</p>\n          <select\n            style={{ marginRight: '15px' }}\n            value={parameters.dataType}\n            onChange={({ target: { value } }) =>\n              setParameters({ ...parameters, dataType: value })\n            }\n          >\n            <option value='simple'>Simple</option>\n            <option value='grouped'>Grouped</option>\n          </select>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Search Keys</p>\n          <select\n            style={{ marginRight: '15px' }}\n            value={parameters.searchKeys ? parameters.searchKeys : ''}\n            onChange={({ target: { value } }) =>\n              setParameters({\n                ...parameters,\n                searchKeys: value === '' ? null : value.split(',')\n              })\n            }\n          >\n            <option value=''>All</option>\n            <option value={['englishName']}>{`['englishName']`}</option>\n            <option\n              value={['englishName', 'aroundPlanet.planet']}\n            >{`['englishName','aroundPlanet.planet']`}</option>\n          </select>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Search depth</p>\n          <input\n            style={{ marginRight: '15px' }}\n            value={parameters.searchDepth ? parameters.searchDepth : ''}\n            min='0'\n            type='number'\n            onChange={({ target: { value } }) =>\n              setParameters({\n                ...parameters,\n                searchDepth: value === '' ? null : value\n              })\n            }\n          />\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Minimum characters</p>\n          <input\n            style={{ marginRight: '15px' }}\n            value={parameters.minCar ? parameters.minCar : ''}\n            min='0'\n            type='number'\n            onChange={({ target: { value } }) =>\n              setParameters({\n                ...parameters,\n                minCar: value === '' ? null : value\n              })\n            }\n          />\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            margin: '5px'\n          }}\n        >\n          <p>Fuzzy sensibility</p>\n          <input\n            style={{ marginRight: '15px' }}\n            value={\n              parameters.fuzzySensibility ? parameters.fuzzySensibility : ''\n            }\n            min='0'\n            type='number'\n            onChange={({ target: { value } }) =>\n              setParameters({\n                ...parameters,\n                fuzzySensibility: value === '' ? null : value\n              })\n            }\n          />\n        </div>\n      </div>\n      <div\n        style={{\n          borderBottom: '2px solid black',\n          marginTop: '1vh',\n          marginBottom: '1vh'\n        }}\n      />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          flexWrap: 'wrap',\n          overflowWrap: 'break-word',\n          wordWrap: 'break-word',\n          marginTop: '5vh'\n        }}\n      >\n        {parameters.component === 'hooks' && (\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              flexWrap: 'wrap'\n            }}\n          >\n            <input\n              placeholder='Search anything...'\n              style={{ marginRight: '15px' }}\n              onChange={({ target: { value } }) => {\n                switch (parameters.dataType) {\n                  case 'simple':\n                    setResults(\n                      filter(\n                        data,\n                        {\n                          searchKeys: parameters.searchKeys,\n                          searchDepth: parameters.searchDepth,\n                          minCar: parameters.minCar,\n                          fuzzySensibility: parameters.fuzzySensibility,\n                          renderName: (item) => item.englishName,\n                          renderMeta: (item) => item,\n                          idKey: 'id'\n                        },\n                        parameters.searchType,\n                        value\n                      )\n                    )\n                    break\n                  case 'grouped':\n                    setResults(\n                      filterGrouped(\n                        dataGrouped,\n                        {\n                          planets: {\n                            searchKeys: parameters.searchKeys,\n                            searchDepth: parameters.searchDepth,\n                            minCar: parameters.minCar,\n                            fuzzySensibility: parameters.fuzzySensibility,\n                            renderName: (item) => item.englishName,\n                            renderMeta: (item) => {\n                              const { id, aroundPlanet, ...meta } = item\n                              return meta\n                            },\n                            idKey: 'id'\n                          },\n                          satellites: {\n                            searchKeys: parameters.searchKeys,\n                            searchDepth: parameters.searchDepth,\n                            minCar: parameters.minCar,\n                            fuzzySensibility: parameters.fuzzySensibility,\n                            renderName: (item) =>\n                              `${item.englishName}, satellite of ${\n                                dataGrouped.planets.filter(\n                                  (planet) =>\n                                    planet.id === item.aroundPlanet.planet\n                                )[0].englishName\n                              }`,\n                            renderMeta: (item) => {\n                              const { id, aroundPlanet, ...meta } = item\n                              return meta\n                            },\n                            idKey: 'id'\n                          }\n                        },\n                        parameters.searchType,\n                        value\n                      )\n                    )\n                    break\n                  default:\n                    break\n                }\n              }}\n            />\n            {results && results.length > 0 && (\n              <p>{`${results.length} results`}</p>\n            )}\n            {parameters.dataType === 'simple' &&\n              results &&\n              results.length > 0 &&\n              results.map((item, index) => (\n                <p key={index}>{JSON.stringify(item.metadata)}</p>\n              ))}\n            {parameters.dataType === 'grouped' &&\n              results &&\n              results.planets.length > 0 &&\n              results.planets[0].metadata.moons.length > 0 &&\n              results.planets[0].metadata.moons.map((item, index) => (\n                <p key={index}>{JSON.stringify(item)}</p>\n              ))}\n          </div>\n        )}\n        {parameters.component === 'unstyled' &&\n          parameters.dataType === 'simple' && (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                flexWrap: 'wrap'\n              }}\n            >\n              <SearchBox\n                searchType={parameters.searchType}\n                data={data}\n                parameters={{\n                  searchKeys: parameters.searchKeys,\n                  searchDepth: parameters.searchDepth,\n                  minCar: parameters.minCar,\n                  fuzzySensibility: parameters.fuzzySensibility,\n                  renderName: (item) => item.englishName,\n                  renderMeta: (item) => item,\n                  idKey: 'id'\n                }}\n                suggestions={true}\n                onFilter={(value) => {\n                  console.log(value)\n                }}\n                onSelect={(group, value) => {\n                  console.log(group, value)\n                }}\n              />\n            </div>\n          )}\n        {parameters.component === 'unstyled' &&\n          parameters.dataType === 'grouped' && (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                flexWrap: 'wrap'\n              }}\n            >\n              <SearchBoxGrouped\n                searchType={parameters.searchType}\n                data={dataGrouped}\n                parameters={{\n                  planets: {\n                    searchKeys: parameters.searchKeys,\n                    searchDepth: parameters.searchDepth,\n                    minCar: parameters.minCar,\n                    fuzzySensibility: parameters.fuzzySensibility,\n                    renderName: (item) => item.englishName,\n                    renderMeta: (item) => item,\n                    idKey: 'id'\n                  },\n                  satellites: {\n                    searchKeys: parameters.searchKeys,\n                    searchDepth: parameters.searchDepth,\n                    minCar: parameters.minCar,\n                    fuzzySensibility: parameters.fuzzySensibility,\n                    renderName: (item) =>\n                      `${item.englishName}, satellite of ${\n                        dataGrouped.planets.filter(\n                          (planet) => planet.id === item.aroundPlanet.planet\n                        )[0].englishName\n                      }`,\n                    renderMeta: (item) => {\n                      const { id, aroundPlanet, ...meta } = item\n                      return meta\n                    },\n                    idKey: 'id'\n                  }\n                }}\n                suggestions={true}\n                onFilter={(value) => {\n                  console.log(value)\n                }}\n                onSelect={(group, value) => {\n                  console.log(group, value)\n                }}\n              />\n            </div>\n          )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}