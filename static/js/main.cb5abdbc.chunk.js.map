{"version":3,"sources":["../../src/core/core.js","../../src/components/SearchBox.js","App.js","../../src/index.js","index.js"],"names":["typeAndValue","object","type","value","Object","err","console","testObject","query","dataItem","searchKeyItem","searchDepth","prop","getProp","path","filter","data","parameters","searchType","filteredData","testPassed","itemMap","name","metadata","filterGrouped","dataKeys","returnAll","returnAllGrouped","SearchBox","suggestions","onFilter","onSelect","version","useState","results","setResults","setValue","divRef","useRef","handleChange","ref","onBlur","event","document","style","maxHeight","height","width","onChange","target","onFocus","placeholder","key","index","onClick","item","itemResult","dataFilter","dataSet","bodies","isPlanet","paramsSearchFilter","searchKeys","renderName","englishName","renderMeta","idKey","dataFilterDepth","paramsSearchFilterDepth","dataFilterGrouped","planets","satellites","aroundPlanet","paramsSearchFilterGrouped","planet","id","minCar","dataFilterGroupedDepth","paramsSearchFilterGroupedDepth","App","useMemo","p","Suggestions","StyledSuggestions","selectionFilter","setSelectionFilter","resultsFilter","setResultsFilter","resultsFilterDepth","setResultsFilterDepth","selectionFilterGrouped","setSelectionFilterGrouped","resultsFilterGrouped","setResultsFilterGrouped","resultsFilterGroupedDepth","setResultsFilterGroupedDepth","padding","marginRight","disabled","length","map","JSON","stringify","borderBottomColor","moons","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cb5abdbc.chunk.js","sourcesContent":["// Import modules\n//import Fuse from 'fuse.js'\n\n/* --  Utilities -- */\n\n// Return type and value of object\nconst typeAndValue = (object) => {\n  try {\n    switch (typeof object) {\n      case 'number':\n        return { type: 'number', value: object.toString() }\n      case 'boolean':\n        return { type: 'boolean', value: object }\n      case 'object':\n        switch (Object.prototype.toString.call(object)) {\n          case '[object Object]':\n            return { type: 'object', value: object }\n          case '[object Array]':\n            return { type: 'array', value: object }\n          case '[object Date]':\n            return { type: 'date', value: object }\n          case '[object Math]':\n            return { type: 'math', value: object }\n          case '[object Null]':\n            return { type: 'null', value: object }\n          default:\n            return object\n        }\n      default:\n        return { type: 'string', value: object }\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Analyse the tree, checking for additional depth, and for type and value, whether there is a given path or not\nconst getProp = (object, path) => {\n  try {\n    if (!path) {\n      return typeAndValue(object)\n    } else {\n      if (path.indexOf('.') === -1) {\n        return typeAndValue(object[path])\n      } else {\n        if (object[path.split('.')[0]])\n          return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n        else {\n          object[path.split('.')[0]] = {}\n          return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n        }\n      }\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Test the object and return an array of true or false, one entry per object tested\nconst testObject = (query, dataItem, searchKeyItem, searchDepth) => {\n  try {\n    const prop = getProp(dataItem, searchKeyItem)\n    switch (prop.type) {\n      case 'number':\n        return prop.value.toLowerCase().indexOf(query.toLowerCase()) !== -1\n          ? true\n          : false\n      case 'string':\n        return prop.value.toLowerCase().indexOf(query.toLowerCase()) !== -1\n          ? true\n          : false\n      case 'object':\n        return searchDepth > 0\n          ? Object.keys(prop.value)\n              .map((searchKeyItem) =>\n                testObject(\n                  query,\n                  prop.value,\n                  searchKeyItem,\n                  searchDepth ? searchDepth - 1 : 1\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      case 'array':\n        return searchDepth > 0\n          ? prop.value\n              .map((dataItem) =>\n                testObject(\n                  query,\n                  dataItem,\n                  null,\n                  searchDepth ? searchDepth - 1 : 1\n                )\n              )\n              .includes(true)\n            ? true\n            : false\n          : false\n      default:\n        return false\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\nexport const filter = (data, parameters, searchType, query) => {\n  try {\n    let filteredData\n    switch (searchType) {\n      case 'strict':\n        filteredData = data\n          .filter((dataItem) => {\n            let testPassed\n            parameters.searchKeys\n              ? (testPassed = parameters.searchKeys.map(\n                  (searchKeyItem) =>\n                    query && testObject(query, dataItem, searchKeyItem)\n                ))\n              : (testPassed = Object.keys(dataItem).map(\n                  (searchKeyItem) =>\n                    query &&\n                    testObject(\n                      query,\n                      dataItem,\n                      searchKeyItem,\n                      parameters.searchDepth\n                    )\n                ))\n            return testPassed.includes(true) ? true : false\n          })\n          .map((itemMap) => ({\n            value: itemMap[parameters.idKey],\n            name: parameters.renderName(itemMap),\n            metadata: parameters.renderMeta(itemMap)\n          }))\n        break\n      default:\n        break\n    }\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Parse query and return filtered results as groups\nexport const filterGrouped = (data, parameters, searchType, query) => {\n  try {\n    // Filter the data set by keys provided\n    const dataKeys = Object.keys(data)\n    let filteredData = {}\n    switch (searchType) {\n      case 'strict':\n        dataKeys.forEach((item) => {\n          // If parameters available\n          if (parameters[item]) {\n            filteredData = {\n              ...filteredData,\n              [item]: data[item]\n                .filter((dataItem) => {\n                  let testPassed\n                  parameters[item].searchKeys\n                    ? (testPassed = parameters[item].searchKeys.map(\n                        (searchKeyItem) =>\n                          query && testObject(query, dataItem, searchKeyItem)\n                      ))\n                    : (testPassed = Object.keys(dataItem).map(\n                        (searchKeyItem) =>\n                          query &&\n                          testObject(\n                            query,\n                            dataItem,\n                            searchKeyItem,\n                            parameters[item].searchDepth\n                          )\n                      ))\n                  return testPassed.includes(true) ? true : false\n                })\n                .map((itemMap) => ({\n                  value: itemMap[parameters[item].idKey],\n                  name: parameters[item].renderName(itemMap),\n                  metadata: parameters[item].renderMeta(itemMap)\n                }))\n            }\n          }\n        })\n        break\n      /*case 'fuzzy':\n        dataKeys.forEach((key) => {\n          // If parameters available\n          if (parameters[key]) {\n            const options = {\n              includeScore: true,\n              ignoreLocation: true,\n              minMatchCharLength: parameters[key].minCar,\n              shouldSort: true,\n              keys: parameters[key].searchKeys\n            }\n            const fuse = new Fuse(data[key], options)\n            const result = fuse.search(query)\n            filteredData = {\n              ...filteredData,\n              [key]: result.map((itemMap) => ({\n                value: itemMap.item[parameters[key].idKey],\n                name: parameters[key].renderName(itemMap.item),\n                metadata: parameters[key].renderMeta(itemMap.item)\n              }))\n            }\n          }\n        })\n        break*/\n      default:\n        break\n    }\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Return all results\nexport const returnAll = (data, parameters) => {\n  try {\n    let filteredData\n    filteredData = data[item].map((itemMap) => ({\n      value: itemMap[parameters[item].idKey],\n      name: parameters[item].renderName(itemMap),\n      metadata: parameters[item].renderMeta(itemMap)\n    }))\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\n// Return all results - grouped\nexport const returnAllGrouped = (data, parameters) => {\n  try {\n    let filteredData = {}\n    Object.keys(data).forEach((item) => {\n      if (parameters[item]) {\n        filteredData = {\n          ...filteredData,\n          [item]: data[item].map((itemMap) => ({\n            value: itemMap[parameters[item].idKey],\n            name: parameters[item].renderName(itemMap),\n            metadata: parameters[item].renderMeta(itemMap)\n          }))\n        }\n      }\n    })\n    return filteredData\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n","import React, { useState, useRef } from 'react'\n\n// Unstyled component\nconst SearchBox = ({\n  data,\n  parameters,\n  suggestions,\n  onFilter,\n  onSelect,\n  searchType,\n  version\n}) => {\n  const [results, setResults] = useState()\n  const [value, setValue] = useState('')\n  const divRef = useRef(null)\n\n  const handleBlur = () => {\n    function handleClickOutside(event) {\n      if (\n        divRef.current &&\n        results &&\n        suggestions &&\n        !divRef.current.contains(event.target)\n      ) {\n        setResults()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }\n\n  const handleChange = (query) => {\n    try {\n      // Set the input value\n      setValue(query)\n      let filteredData = {}\n\n      if (query) {\n        filteredData = filterGrouped(data, parameters, searchType, query)\n      } else {\n        filteredData = returnAll(data, parameters)\n      }\n\n      if (suggestions && query) {\n        setResults(filteredData)\n      } else {\n        onFilter(filteredData)\n      }\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  return (\n    <div\n      ref={divRef}\n      onBlur={handleBlur}\n      style={{ maxHeight: '5vh', height: '5vh', width: '100%' }}\n    >\n      <input\n        version={version}\n        type='search'\n        value={value}\n        onChange={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        onFocus={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        placeholder={'Type anything...'}\n      />\n      {results && suggestions && (\n        <div>\n          {Object.keys(results).map((item, index) => {\n            return (\n              <div key={index}>\n                <div>\n                  <h1>{item}</h1>\n                </div>\n                <div>\n                  {results[item].length > 0 &&\n                    results[item].map((itemResult, indexResult) => (\n                      <div\n                        key={indexResult}\n                        onClick={() => {\n                          onSelect(item, itemResult)\n                          setResults(null)\n                        }}\n                      >\n                        <p>{itemResult.name}</p>\n                      </div>\n                    ))}\n                  {results[item].length === 0 && <p>No results</p>}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { useState } from 'react'\nimport { useSearch } from 'react-search-headless'\nimport dataSet from './data.json'\n\n// The data\nconst dataFilter = dataSet.bodies.filter((item) => item.isPlanet === true)\n\n// How you are searching and rendering these data\nconst paramsSearchFilter = {\n  searchKeys: ['englishName'],\n  renderName: (item) => item.englishName,\n  renderMeta: (item) => item,\n  idKey: 'id'\n}\n\n// The data\nconst dataFilterDepth = dataSet.bodies.filter((item) => item.isPlanet === true)\n\n// How you are searching and rendering these data\nconst paramsSearchFilterDepth = {\n  searchDepth: 2,\n  renderName: (item) => item.englishName,\n  renderMeta: (item) => item,\n  idKey: 'id'\n}\n\n// The data\nconst dataFilterGrouped = {\n  planets: dataSet.bodies.filter((item) => item.isPlanet === true),\n  satellites: dataSet.bodies\n    .filter((item) => item.isPlanet === false && item.aroundPlanet)\n    .filter((item) => item.englishName)\n}\n\n// How you are searching and rendering these data\nconst paramsSearchFilterGrouped = {\n  planets: {\n    searchKeys: ['englishName'],\n    renderName: (item) => item.englishName,\n    renderMeta: (item) => item,\n    //minCar: 3,\n    idKey: 'id'\n  },\n  satellites: {\n    searchKeys: ['englishName', 'aroundPlanet.planet'],\n    renderName: (item) =>\n      `${item.englishName}, satellite of ${\n        dataFilterGrouped.planets.filter(\n          (planet) => planet.id === item.aroundPlanet.planet\n        )[0].englishName\n      }`,\n    renderMeta: (item) => {\n      const { id, aroundPlanet, ...meta } = item\n      return meta\n    },\n    minCar: 1,\n    idKey: 'id'\n  }\n}\n\n// The data\nconst dataFilterGroupedDepth = {\n  planets: dataSet.bodies.filter((item) => item.isPlanet === true),\n  satellites: dataSet.bodies\n    .filter((item) => item.isPlanet === false && item.aroundPlanet)\n    .filter((item) => item.englishName)\n}\n\n// How you are searching and rendering these data\nconst paramsSearchFilterGroupedDepth = {\n  planets: {\n    renderName: (item) => item.englishName,\n    renderMeta: (item) => item,\n    //minCar: 3,\n    idKey: 'id'\n  },\n  satellites: {\n    searchDepth: 3,\n    renderName: (item) =>\n      `${item.englishName}, satellite of ${\n        dataFilterGroupedDepth.planets.filter(\n          (planet) => planet.id === item.aroundPlanet.planet\n        )[0].englishName\n      }`,\n    renderMeta: (item) => {\n      const { id, aroundPlanet, ...meta } = item\n      return meta\n    },\n    minCar: 1,\n    idKey: 'id'\n  }\n}\n\nconst App = () => {\n  const { filter, filterGrouped } = useSearch()\n\n  // filter example\n  const [selectionFilter, setSelectionFilter] = useState('')\n  const [resultsFilter, setResultsFilter] = useState()\n\n  // filter + depth example\n  const [resultsFilterDepth, setResultsFilterDepth] = useState()\n\n  // filterGrouped example\n  const [selectionFilterGrouped, setSelectionFilterGrouped] = useState('')\n  const [resultsFilterGrouped, setResultsFilterGrouped] = useState()\n\n  // filterGrouped + depth example\n  const [resultsFilterGroupedDepth, setResultsFilterGroupedDepth] = useState()\n\n  return (\n    <div style={{ padding: '20px' }}>\n      {/*<h2>Using the styled Search Box</h2>\n      <StyledSearchBox\n        version='light'\n        searchType='strict'\n        data={data}\n        parameters={paramsSearch}\n        suggestions={true}\n        onFilter={(value) => {\n          console.log(value)\n        }}\n        onSelect={(group, value) => {\n          console.log(group, value)\n        }}\n      />\n      <div style={{ borderBottomColor: 'black' }} />\n      <h2>Using the unstyled Search Box</h2>\n      <SearchBox\n        searchType='strict'\n        data={data}\n        parameters={paramsSearch}\n        suggestions={true}\n        onFilter={(value) => {\n          console.log(value)\n        }}\n        onSelect={(group, value) => {\n          console.log(group, value)\n        }}\n      />\n      <div style={{ borderBottomColor: 'black' }} />*/}\n      <h2>Using the hooks + filter</h2>\n      <select\n        style={{ marginRight: '15px' }}\n        onChange={({ target: { value } }) => setSelectionFilter(value)}\n      >\n        <option value=''> -- Select an option -- </option>\n        <option value='earth'>Earth</option>\n        <option value='mars'>Mars</option>\n        <option value='jupiter'>Jupiter</option>\n        <option value='saturn'>Saturn</option>\n        <option value='neptune'>Neptune</option>\n        <option value='uranus'>Uranus</option>\n        <option value='pluto'>Pluto</option>\n      </select>\n      <button\n        type='button'\n        disabled={selectionFilter !== '' ? false : true}\n        onClick={() => {\n          setResultsFilter(\n            filter(dataFilter, paramsSearchFilter, 'strict', selectionFilter)\n          )\n        }}\n      >\n        Search\n      </button>\n      {resultsFilter &&\n        resultsFilter.length > 0 &&\n        resultsFilter.map((item, index) => (\n          <p key={index}>{JSON.stringify(item.metadata)}</p>\n        ))}\n      <div style={{ borderBottomColor: 'black' }} />\n      <h2>Using the hooks + filter + depth</h2>\n      <input\n        placeholder='Search anything...'\n        style={{ marginRight: '15px' }}\n        onChange={({ target: { value } }) =>\n          setResultsFilterDepth(\n            filter(dataFilterDepth, paramsSearchFilterDepth, 'strict', value)\n          )\n        }\n      />\n      {resultsFilterDepth &&\n        resultsFilterDepth.length > 0 &&\n        resultsFilterDepth.map((item, index) => (\n          <p key={index}>{JSON.stringify(item.metadata)}</p>\n        ))}\n      <div style={{ borderBottomColor: 'black' }} />\n      <h2>Using the hooks + filterGrouped</h2>\n      <select\n        style={{ marginRight: '15px' }}\n        onChange={({ target: { value } }) => setSelectionFilterGrouped(value)}\n      >\n        <option value=''> -- Select an option -- </option>\n        <option value='earth'>Earth's moons</option>\n        <option value='mars'>Mars's moons</option>\n        <option value='jupiter'>Jupiter's moons</option>\n        <option value='saturn'>Saturn's moons</option>\n        <option value='neptune'>Neptune's moons</option>\n        <option value='uranus'>Uranus's moons</option>\n        <option value='pluto'>Pluto's moons</option>\n      </select>\n      <button\n        type='button'\n        disabled={selectionFilterGrouped !== '' ? false : true}\n        onClick={() => {\n          setResultsFilterGrouped(\n            filterGrouped(\n              dataFilterGrouped,\n              paramsSearchFilterGrouped,\n              'strict',\n              selectionFilterGrouped\n            )\n          )\n        }}\n      >\n        Search\n      </button>\n      {resultsFilterGrouped &&\n        resultsFilterGrouped.planets[0].metadata.moons.length > 0 &&\n        resultsFilterGrouped.planets[0].metadata.moons.map((item, index) => (\n          <p key={index}>{JSON.stringify(item)}</p>\n        ))}\n      <div style={{ borderBottomColor: 'black' }} />\n      <h2>Using the hooks + filterGrouped + depth</h2>\n      <input\n        placeholder='Search anything...'\n        style={{ marginRight: '15px' }}\n        onChange={({ target: { value } }) =>\n          setResultsFilterGroupedDepth(\n            filterGrouped(\n              dataFilterGroupedDepth,\n              paramsSearchFilterGroupedDepth,\n              'strict',\n              value\n            )\n          )\n        }\n      />\n      <p>\n        {resultsFilterGroupedDepth &&\n          (resultsFilterGroupedDepth.planets.length > 0 ||\n            resultsFilterGroupedDepth.satellites.length > 0) &&\n          JSON.stringify(resultsFilterGroupedDepth)}\n      </p>\n    </div>\n  )\n}\n\nexport default App\n","// Import modules\nimport React, { useMemo } from 'react'\nimport { filter, filterGrouped, returnAll, returnAllGrouped } from './core/core'\nimport SearchBox from './components/SearchBox'\n\n/*  ---  Headless component  ---  */\nexport const useSearch = () => {\n  return useMemo(\n    () => ({\n      filter: (...p) => filter(...p),\n      filterGrouped: (...p) => filterGrouped(...p),\n      returnAll: (...p) => returnAll(...p),\n      returnAllGrouped: (...p) => returnAllGrouped(...p),\n      SearchBox: ({ ...p }) => <SearchBox {...p} />,\n      Suggestions: ({ ...p }) => <Suggestions {...p} />,\n      StyledSuggestions: ({ ...p }) => <StyledSuggestions {...p} />\n    }),\n    []\n  )\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}