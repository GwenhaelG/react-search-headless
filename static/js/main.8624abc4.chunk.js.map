{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["StyledSearchBox","styled","props","searchType","useState","divRef","useRef","getProp","object","path","handleChange","query","setValue","dataKeys","Object","filteredData","item","parameters","data","dataItem","searchKeyItem","testPassed","itemMap","value","name","metadata","key","options","includeScore","ignoreLocation","minMatchCharLength","shouldSort","keys","searchKeys","result","fuse","err","console","parseQuery","suggestions","setResults","onFilter","ref","onBlur","event","document","style","maxHeight","height","width","type","onChange","target","onFocus","placeholder","results","overflow","overflowY","zIndex","index","className","itemResult","indexResult","borderRadius","cursor","onClick","onSelect","dataSearch","planets","id","satellites","planet","paramsSearch","renderName","renderMeta","minCar","idKey","App","log","group","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8624abc4.chunk.js","sourcesContent":["import React, { useState, useRef, Fragment } from 'react'\nimport styled from 'styled-components'\nimport Fuse from 'fuse.js'\n\nconst StyledSearchBox = styled.input`\n  font-family: 'AT Surt SemiBold';\n  background-color: white;\n  color: black;\n  border-radius: 20px;\n  border-color: lightgrey;\n  display: inline-block;\n  margin-bottom: 0;\n  text-align: left;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n  touch-action: manipulation;\n  cursor: text;\n  border: 1px solid black;\n  padding: 6px 12px;\n  font-size: 0.875rem;\n  line-height: 1.42857143;\n  box-sizing: border-box;\n  width: 100%;\n  font-size: ${(props) => (props.size ? props.size * 18 + 'px' : 'auto')};\n\n  &:disabled {\n    background-color: ${(props) =>\n      props.version === 'light' ? 'lightgrey' : 'black'};\n    color: ${(props) => (props.version === 'light' ? 'lightgrey' : 'black')};\n  }\n\n  &:hover {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.2);\n  }\n`\n\nconst SearchBox = ({\n  data,\n  parameters,\n  suggestions,\n  onFilter,\n  onSelect,\n  searchType\n}) => {\n  const [results, setResults] = useState()\n  const [value, setValue] = useState('')\n  const divRef = useRef(null)\n\n  const getProp = (object, path) => {\n    if (path.indexOf('.') === -1) {\n      return typeof object[path] === 'number'\n        ? object[path].toString()\n        : object[path]\n    } else {\n      if (object[path.split('.')[0]])\n        return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n      else {\n        object[path.split('.')[0]] = {}\n        return getProp(object[path.split('.')[0]], path.split('.').slice(1))\n      }\n    }\n  }\n\n  const parseQuery = (query, dataKeys) => {\n    try {\n      let filteredData = {}\n      switch (searchType) {\n        case 'strict':\n          dataKeys.forEach((item) => {\n            // If parameters available\n            if (parameters[item]) {\n              filteredData = {\n                ...filteredData,\n                [item]: data[item]\n                  .filter((dataItem) => {\n                    const testPassed = parameters[\n                      item\n                    ].searchKeys.map((searchKeyItem) =>\n                      query &&\n                      getProp(dataItem, searchKeyItem) &&\n                      getProp(dataItem, searchKeyItem)\n                        .toLowerCase()\n                        .indexOf(query.toLowerCase()) !== -1\n                        ? true\n                        : false\n                    )\n                    return testPassed.includes(true) ? true : false\n                  })\n                  .map((itemMap) => ({\n                    value: itemMap[parameters[item].idKey],\n                    name: parameters[item].renderName(itemMap),\n                    metadata: parameters[item].renderMeta(itemMap)\n                  }))\n              }\n            }\n          })\n          break\n        case 'fuzzy':\n          dataKeys.forEach((key) => {\n            // If parameters available\n            if (parameters[key]) {\n              const options = {\n                includeScore: true,\n                ignoreLocation: true,\n                minMatchCharLength: parameters[key].minCar,\n                shouldSort: true,\n                keys: parameters[key].searchKeys\n              }\n              const fuse = new Fuse(data[key], options)\n              const result = fuse.search(query)\n              filteredData = {\n                ...filteredData,\n                [key]: result.map((itemMap) => ({\n                  value: itemMap.item[parameters[key].idKey],\n                  name: parameters[key].renderName(itemMap.item),\n                  metadata: parameters[key].renderMeta(itemMap.item)\n                }))\n              }\n            }\n          })\n          break\n        default:\n          break\n      }\n      return filteredData\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  const handleBlur = () => {\n    function handleClickOutside(event) {\n      if (\n        divRef.current &&\n        results &&\n        suggestions &&\n        !divRef.current.contains(event.target)\n      ) {\n        setResults()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }\n\n  const handleChange = (query) => {\n    try {\n      // Set the input value\n      setValue(query)\n\n      // Filter the data set by keys provided\n      const dataKeys = Object.keys(data)\n\n      let filteredData = {}\n\n      if (query) {\n        filteredData = parseQuery(query, dataKeys)\n      } else {\n        dataKeys.forEach((item) => {\n          if (parameters[item]) {\n            filteredData = {\n              ...filteredData,\n              [item]: data[item].map((itemMap) => ({\n                value: itemMap[parameters[item].idKey],\n                name: parameters[item].renderName(itemMap),\n                metadata: parameters[item].renderMeta(itemMap)\n              }))\n            }\n          }\n        })\n      }\n\n      if (suggestions && query) {\n        setResults(filteredData)\n      } else {\n        onFilter(filteredData)\n      }\n    } catch (err) {\n      console.error(err.message)\n    }\n  }\n\n  return (\n    <div\n      ref={divRef}\n      onBlur={handleBlur}\n      style={{ maxHeight: '5vh', height: '5vh', width: '100%' }}\n    >\n      <StyledSearchBox\n        type='search'\n        value={value}\n        onChange={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        onFocus={({ target: { value } }) => {\n          handleChange(value)\n        }}\n        placeholder={'Type anything...'}\n      />\n      {results && suggestions && (\n        <div\n          style={{\n            maxHeight: '50vh',\n            overflow: 'visible',\n            overflowY: 'scroll',\n            zIndex: 2000\n          }}\n        >\n          {Object.keys(results).map((item, index) => {\n            return (\n              <div key={index} className='bg-white border-dark border-bottom'>\n                <div className='border-dark border-bottom justify-content-between align-items-center'>\n                  <h1>{item}</h1>\n                </div>\n                <div className='mt-3'>\n                  {results[item].length > 0 &&\n                    results[item].map((itemResult, indexResult) => (\n                      <div\n                        key={indexResult}\n                        className='border-dark border p-2 m-2'\n                        style={{ borderRadius: '20px', cursor: 'pointer' }}\n                        onClick={() => {\n                          onSelect(item, itemResult)\n                          setResults(null)\n                        }}\n                      >\n                        <p className='m-0'>{itemResult.name}</p>\n                      </div>\n                    ))}\n                  {results[item].length === 0 && (\n                    <p className='m-0'>No results</p>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\nimport SearchBox from 'react-search-headless'\n\n// Data you want to search on\nconst dataSearch = {\n  planets: [\n    { id: 1, name: 'Mercury' },\n    { id: 2, name: 'Venus' },\n    { id: 3, name: 'Earth' },\n    { id: 4, name: 'Mars' }\n  ],\n  satellites: [\n    { id: 1, name: 'Moon', planet: { name: 'Earth' } },\n    { id: 2, name: 'Deimos', planet: { name: 'Mars' } },\n    { id: 3, name: 'Phoebos', planet: { name: 'Mars' } }\n  ]\n}\n\n// How you are searching and rendering these data\nconst paramsSearch = {\n  planets: {\n    searchKeys: ['name'],\n    renderName: (item) => item.name,\n    renderMeta: (item) => item,\n    minCar: 3,\n    idKey: 'id'\n  },\n  satellites: {\n    searchKeys: ['name', 'planet.name'],\n    renderName: (item) => `${item.name}, satellite of ${item.planet.name}`,\n    renderMeta: (item) => {\n      const { id, planet, ...meta } = item\n      return meta\n    },\n    minCar: 1,\n    idKey: 'id'\n  }\n}\n\nconst App = () => {\n  return (\n    <SearchBox\n      searchType='strict'\n      data={dataSearch}\n      parameters={paramsSearch}\n      suggestions={true}\n      onFilter={(value) => {\n        console.log(value)\n      }}\n      onSelect={(group, value) => {\n        console.log(group, value)\n      }}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}